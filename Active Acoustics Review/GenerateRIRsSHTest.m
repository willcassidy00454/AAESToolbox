% This script generates AAES IRs for a set of rooms with varying
% dimensions, absorption coefficients and AAES channel counts.

% close all

%% User Parameters

% General audio parameters
sample_rate = 48000;
bit_depth = 24;

absorptions_dir = "Active Acoustics Review/Absorption Coefficients/";
coords_dir = "Active Acoustics Review/Coordinates SH Test/";
rotations_dir = "Active Acoustics Review/Rotations/";
directivities_dir = "Active Acoustics Review/Directivities/";
output_dir = "Active Acoustics Review/Generated AAES RIRs SH Test/Azimuth/";

condition_index = 1;

GenerateRIRs(condition_index, ...
    absorptions_dir, ...
    coords_dir, ...
    rotations_dir, ...
    directivities_dir, ...
    output_dir, ...
    sample_rate, ...
    bit_depth);

%% Generation

function GenerateRIRs(condition_index, absorptions_dir, coords_dir, rotations_dir, directivities_dir, output_dir, sample_rate, bit_depth)
    room_dims = readmatrix("Active Acoustics Review/Room Dimensions/room_dimensions.dat");
    alphas = readmatrix(absorptions_dir + "absorption_coeffs_"+condition_index+".dat");
    
    src_coords = readmatrix(coords_dir + "src_coords_horizontal.dat");
    rec_coords = readmatrix(coords_dir + "rec_coords.dat");
    % ls_coords = readmatrix(coords_dir + "ls_coords_"+condition_index+".dat");
    % mic_coords = readmatrix(coords_dir + "mic_coords_"+condition_index+".dat");
    
    src_rotations = readmatrix(rotations_dir + "src_rotations.dat");
    rec_rotations = readmatrix(rotations_dir + "rec_rotations.dat");
    % ls_rotations = readmatrix(rotations_dir + "ls_rotations_"+condition_index+".dat");
    % mic_rotations = readmatrix(rotations_dir + "mic_rotations_"+condition_index+".dat");
    
    src_directivities = string(readcell(directivities_dir + "src_directivities.csv"));
    rec_directivities = string(readcell(directivities_dir + "rec_directivities_3rd_order.csv"));
    % ls_directivities = string(readcell(directivities_dir + "ls_directivities_"+condition_index+".csv"));
    % mic_directivities = string(readcell(directivities_dir + "mic_directivities_"+condition_index+".csv"));
    
    % current_config = RoomWithAAES(room_dims, ...
    %     alphas, ...
    %     src_coords, ...
    %     rec_coords, ...
    %     ls_coords, ...
    %     mic_coords, ...
    %     src_rotations, ...
    %     rec_rotations, ...
    %     ls_rotations, ...
    %     mic_rotations, ...
    %     src_directivities, ...
    %     rec_directivities, ...
    %     ls_directivities, ...
    %     mic_directivities, ...
    %     sample_rate, ...
    %     bit_depth);
    % current_config.GenerateSystemIRs(output_dir + "Condition "+condition_index+"/", true, true);
    for src_pos_index = 1:size(src_coords, 1)
        for third_order_sh_output_index = 1:16
            current_src_coords = src_coords(src_pos_index, :);
            ir = GenerateSrcToRecIRs(current_src_coords, ...
                rec_coords, ...
                src_rotations, ...
                rec_rotations, ...
                src_directivities, ...
                rec_directivities, ...
                room_dims, ...
                alphas, ...
                sample_rate, ...
                "Src Position " + src_pos_index, ...
                true, ...
                third_order_sh_output_index);

            third_order_irs(third_order_sh_output_index, src_pos_index, 1:length(ir)) = ir;
        end
    end
    
    % normalise all
    third_order_irs = third_order_irs / max(abs(third_order_irs),[],'all');

    for src_pos_index = 1:size(src_coords, 1)
        SaveIRsMultichannelReceivers(third_order_irs(:,src_pos_index,:),sample_rate,bit_depth,output_dir,"Src Position " + src_pos_index);
    end
end