classdef RoomWithAAES
   properties
      room_dims {mustBeNumeric};
      alphas {mustBeNumeric};
      src_positions {mustBeNumeric};
      rec_positions {mustBeNumeric};
      ls_positions {mustBeNumeric};
      mic_positions {mustBeNumeric};
      src_rotations {mustBeNumeric};
      rec_rotations {mustBeNumeric};
      ls_rotations {mustBeNumeric};
      mic_rotations {mustBeNumeric};
      src_directivities;
      rec_directivities;
      ls_directivities;
      mic_directivities;
      sample_rate {mustBeNumeric};
      bit_depth {mustBeNumeric};
   end
   methods
       % Constructor
       function obj = RoomWithAAES(room_dims, ...
               alphas, ...
               src_positions, ...
               rec_positions, ...
               ls_positions, ...
               mic_positions, ...
               src_rotations, ...
               rec_rotations, ...
               ls_rotations, ...
               mic_rotations, ...
               src_directivities, ...
               rec_directivities, ...
               ls_directivities, ...
               mic_directivities, ...
               sample_rate, ...
               bit_depth)
           obj.room_dims = room_dims;
           obj.alphas = alphas;
           obj.src_positions = src_positions;
           obj.rec_positions = rec_positions;
           obj.ls_positions = ls_positions;
           obj.mic_positions = mic_positions;
           obj.src_rotations = src_rotations;
           obj.rec_rotations = rec_rotations;
           obj.ls_rotations = ls_rotations;
           obj.mic_rotations = mic_rotations;
           obj.src_directivities = src_directivities;
           obj.rec_directivities = rec_directivities;
           obj.ls_directivities = ls_directivities;
           obj.mic_directivities = mic_directivities;
           obj.sample_rate = sample_rate;
           obj.bit_depth = bit_depth;
       end
       
       % Generates the room impulse responses for each
       % loudspeaker-microphone pair in the room
       function GenerateSystemIRs(obj, output_dir, should_high_pass, should_use_3rd_order_output)
           if ~exist("should_use_3rd_order_output", "var")
               should_use_3rd_order_output = false;
           end

           mkdir(output_dir);

           should_normalise = true; % This will batch normalise all outputs to 0 dBFS, preserving level relationships

           if (should_use_3rd_order_output)
               GenerateAKToolsRIRs3rdOrderOutput(obj.room_dims, ...
                   obj.alphas, ...
                   obj.src_positions, ...
                   obj.rec_positions, ...
                   obj.ls_positions, ...
                   obj.mic_positions, ...
                   obj.src_rotations, ...
                   obj.rec_rotations, ...
                   obj.ls_rotations, ...
                   obj.mic_rotations, ...
                   obj.src_directivities, ...
                   obj.rec_directivities, ...
                   obj.ls_directivities, ...
                   obj.mic_directivities, ...
                   obj.sample_rate, ...
                   output_dir, ...
                   obj.bit_depth, ...
                   should_high_pass, ...
                   should_normalise);
           else
               GenerateAKToolsRIRs(obj.room_dims, ...
                   obj.alphas, ...
                   obj.src_positions, ...
                   obj.rec_positions, ...
                   obj.ls_positions, ...
                   obj.mic_positions, ...
                   obj.src_rotations, ...
                   obj.rec_rotations, ...
                   obj.ls_rotations, ...
                   obj.mic_rotations, ...
                   obj.src_directivities, ...
                   obj.rec_directivities, ...
                   obj.ls_directivities, ...
                   obj.mic_directivities, ...
                   obj.sample_rate, ...
                   output_dir, ...
                   obj.bit_depth, ...
                   should_high_pass, ...
                   should_normalise);
           end
      end
   end
end